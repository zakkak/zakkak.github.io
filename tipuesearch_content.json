{"pages":[{"url":"pages/frontpage.html","text":"Foivos (pronounced ['fivos]) Zakkak is a Research Associate at the Advanced Processor Technologies (APT) group of the University of Manchester working on process virtual machines, and more specifically on the Maxine VM . Prior to joining the University of Manchester, he worked at the Computer Architecture and VLSI Systems Laboratory (CARV) of FORTH-ICS . In the context of the GreenVM project , he developed, DiSquawk , a Java Virtual Machine (JVM) that targets non-cache-coherent architectures. His previous work, SCOOP , was a source-to-source compiler that used information from task annotations (memory footprints) to generate optimized code for task-based runtime systems. He has also been involved in the development and performance analysis process of the TPC (Tagged Procedure Calls), BDDT (Block-level Dynamic Dependence Analysis for Deterministic Task-Based Parallelism) and PARTEE (PARallel Task Execution Engine) task-based runtime systems.","tags":"About","title":""},{"url":"blog/latex_peculiarities.html","text":"Separating sentences In LaTeX, in order to separate two sentences one needs to insert two spaces between the period and the first letter of the second sentence, e.g., First sentence. Second sentence. , or separate the two sentences with a new line, e.g., First sentence. Second sentence. Using a single latex line for each sentence, allows for better diffs when using version control systems since one can easily observe which sentences have been changed and how. Separating paragraphs In LaTeX, in order to separate two paragraphs one needs to leave an empty line between the last sentence of the first paragraph and the first sentence of the second paragraph. E.g., First paragraph. Second paragraph. Alternatively, one may force a new paragraph by adding \\\\ at the end of the last sentence of the first paragraph and by starting the second paragraph on the next line. E.g., First paragraph.\\\\ Second paragraph. Forcing two words to stay on the same line LaTeX by default will automatically break long sentences and align them properly. LaTeX usually breaks sentences at spaces. However, there are cases where one wants to prevent LaTeX from braking at specific points to improve readability. To achieve this one needs to use ~ in place of a space. LaTeX treats any words separated by ~ as one word, and thus it won't break them. A good practice is to always separate a citation from the previous word using ~ to avoid new lines starting with a citation, e.g., \" 1 find that X is bigger than Y\". E.g., Zakkak et al.~\\cite{zakkak} in Figure~\\ref{myfig} presented in Section~\\ref{intro} ... Quoting text In most text editors we quote text by simply wrapping it in ~\"~. In LaTeX, however, we need to use different symbols to denote the beginning of a quotation and different symbols to denote the ending of it. The beginning is denoted by `` and the ending by ~''~, note that this is two ~'~ and not a single ~\"~. E.g., The following is a quoted phrase, ``quoted phrase''. Footnotes: 1 DEFINITION NOT FOUND.","tags":"Blog","title":"LaTeX Peculiarities"},{"url":"courses/managed_runtime_systems.html","text":"Introduction The aim of this course is to introduce students to the world of managed runtime systems. Managed runtime systems are the ones responsible for executing interpreted languages. Such languages are usually compiled to some intermediate representation instead of native machine code, this intermediate representation is then parsed and executed by the corresponding managed runtime system. In this course we study how managed programming languages are implemented in the managed runtime systems, and more specifically the Java programming language. We also focus on how automatic memory management works, and how just-in-time compilers optimize code on the fly. Syllabus Lectures will take place at A.121 every Tuesday 14:00-16:00 and Thursday 12:00-14:00 . Week # Description Tuesday Thursday Assignment 05/02/2018 1 Introduction: What is a managed runtime system Slides (Course Intro) Slides (VMs Intro) -- 12/02/2018 2 Bytecode Interpretation Slides (The JVM) Slides (GC Intro) Reading (Interpreters) 19/02/2018 3 Garbage Collection Paper (Interpreters) Slides (GC Intro2) -- 26/02/2018 4 Just In Time Compilation Slides (JIT 1) Tutorial (G1) Reading (G1) 05/03/2018 5 Just In Time Compilation Slides (JIT 2) Paper (JIT History) Reading (JIT History) 12/03/2018 6 Metacircular VMs Slides (Metacircular) Paper (Maxine VM) Reading (Maxine VM) 19/03/2018 7 Metacircular VMs Tutorial (Maxine VM) Slides (Truffle) -- 26/03/2018 8 Concurrency and Memory Models Slides (Concurrency) Paper (JMM) Reading (JMM) 02/04/2018 - Easter Holidays -- -- -- 09/04/2018 - Easter Holidays -- -- -- 16/04/2018 9 Concurrency and Memory Models Slides (Java Concurrency) Paper (JDMM) Reading (JDMM) 23/04/2018 10 Advanced Garbage Collection Slides Paper (Performance) Reading (Performance) 30/04/2018 11 Profiling and Adaptive Optimization Slides (Guest: Dr. Kotselidis) -- -- 07/05/2018 12 (Optional) Project discussions -- -- -- 14/05/2018 13 Project Presentations Project Presentations Project Presentations -- Material / Slides The slides of the course will be available in PDF format at https://speakerdeck.com/zakkak . For the source code (LaTeX Beamer) of the slides you can visit https://github.com/zakkak/Managed-Runtime-Systems-Course . Marking Scheme Midterm 0% Reading Assignments 35% (7x5%) Final exam 0% Project 50% Class participation 15% Reading Assignments During this course you will be asked to read a number of scientific papers covering the topics at hand. In total you will be asked to read 7 scientific papers and you will be assigned to deliver a short summary for each of them. We will discuss each paper in the classroom to better understand them and answer any questions you might come up with. Summary format Your summary should answer the following questions: What is the key point of the paper? (If it is the survey, what are the key techniques it presents?) What did you like the most in the paper? What could be improved in the presentation/content of the paper? Do you have any ideas on how to improve the presented idea/technique? On a scale of 0-5, with 5 being the most positive, how would you rate the paper? Summary Submission A Google form for each paper has been created, please fill it before the beginning of the lecture where we will discuss the corresponding paper. The Structure and Performance of Efficient Interpreters (2003) Garbage-First Garbage Collection (2004) A Brief History of Just-In-Time (2003) Maxine: An approachable virtual machine for, and in, java (2013) The Java Memory Model (2005) JDMM: A Java Memory Model for Non-Cache-Coherent Memory Architectures (2014) Statistically Rigorous Java Performance Evaluation (2007) Projects You can either work alone or form a team of two. For your project you can either focus on JIT compilation or Garbage Collection. You shall choose and propose a project on your own. The project proposal should answer the following questions: What do you find interesting in the project? What do you expect to learn through this project implementation? How are you going to demonstrate the success of your project? You are strongly encouraged to work on Maxine VM for your project, but projects on openJDK (or other VMs, even non-Java VMs) will be also accepted. Projects will be developed on github and will be based on the latest release of the corresponding VM you will chose to work on. Project proposal deadline Please submit your project proposals by 15/03/2018 ! If you want feedback please submit earlier. Contact You can contact me directly via e-mail or through the course's mailing list hy446-list |at| csd.uoc.gr . Acknowledgments Guest lecture I kindly thank Dr. Christos Kotselidis for his insightful presentation regarding \"The Art of Java Performance\" and the exciting live demo. Inspiration and Material I would also like to thank Mario Wolczko for sharing his material and experiences from a similar course he taught at UC Berkeley. The original material of his course can be found here .","tags":"Courses","title":"Managed Runtime Systems"},{"url":"tutorials/gitlab_ldap_auth_without_querying_account.html","text":"Note : This tutorial was last tested with gitlab 8.5 installed from source. This tutorial aims to describe how to modify a Gitlab installation to use the users credentials to authenticate with the LDAP server. By default Gitlab relies on anonymous binding or a special querying user to ask the LDAP server about the existence of a user before authenticating her with her own credentials. For security reasons, however, many administrators disable anonymous binding and forbid the creation of special querying LDAP users. In this tutorial we assume that we have a gitlab setup at gitlab.example.com and an LDAP server running on ldap.example.com, and users have a DN of the following form: CN=username,OU=Users,OU=division,OU=department,DC=example,DC=com . Patching To make Gitlab work in such cases we need to partly modify its authentication mechanism regarding LDAP. First, we replace the omniauth-ldap module with this derivation. To achieve this we apply the following patch to gitlab/Gemfile : diff --git a/Gemfile b/Gemfile index 1171eeb..f25bc60 100644 --- a/Gemfile +++ b/Gemfile @@ -44,4 +44,5 @@ gem 'gitlab-grack', '~> 2.0.2', require: 'grack' # LDAP Auth # GitLab fork with several improvements to original library. For full list of changes # see https://github.com/intridea/omniauth-ldap/compare/master...gitlabhq:master -gem 'gitlab_omniauth-ldap', '1.2.1', require: \"omniauth-ldap\" +#gem 'gitlab_omniauth-ldap', '1.2.1', require: \"omniauth-ldap\" +gem 'gitlab_omniauth-ldap', :git => 'https://github.com/zakkak/omniauth-ldap.git', require: 'net-ldap', require: \"omniauth-ldap\" Now, we need to perform the following actions: sudo -u git -H bundle install --without development test mysql --path vendor/bundle --no-deployment sudo -u git -H bundle install --deployment --without development test mysql aws These commands will fetch the modified omniauth-ldap module in gitlab/vendor/bundle/ruby/2.x.x/bundler/gems . Now that the module is fetched, we need to modify it to use the DN our LDAP server expects. We achieve this by patching lib/omniauth/strategies/ldap.rb in gitlab/vendor/bundle/ruby/2.x.x/bundler/gems/omniauth-ldap with: diff --git a/lib/omniauth-ldap/adaptor.rb b/lib/omniauth-ldap/adaptor.rb index d4fb678..e9615ae 100644 --- a/lib/omniauth-ldap/adaptor.rb +++ b/lib/omniauth-ldap/adaptor.rb @@ -41,7 +41,7 @@ module OmniAuth Adaptor.validate(configuration) @configuration = configuration.dup # The HACK! FIXME: do it in a more generic/configurable way - @configuration[:bind_dn] = \"CN=#{@configuration[:login]},OU=Test,DC=my,DC=example,DC=com\" + @configuration[:bind_dn] = \"CN=#{@configuration[:login]},OU=Users,OU=division,OU=department,DC=example,DC=com\" @configuration[:allow_anonymous] ||= false @logger = @configuration.delete(:logger) VALID_ADAPTER_CONFIGURATION_KEYS.each do |name| With this module, gitlab uses the user's credentials to bind to the LDAP server and query it, as well as, to authenticate the user herself. This however will only work as long as the users do not use ssh-keys to authenticate with Gitlab . When authenticating through an ssh-key, by default Gitlab queries the LDAP server to find out whether the corresponding user is (still) a valid user or not. At this point, we cannot use the user credentials to query the LDAP server, since the user did not provide them to us. As a result we disable this mechanism, essentially allowing users with registered ssh-keys but removed from the LDAP server to still use our Gitlab setup. To prevent such users from being able to still use your Gitlab setup, you will have to manually delete their ssh-keys from any accounts in your setup. To disable this mechanism we patch gitlab/lib/gitlab/ldap/access.rb with: diff --git a/lib/gitlab/ldap/access.rb b/lib/gitlab/ldap/access.rb index 16ff03c..9ebaeb6 100644 --- a/lib/gitlab/ldap/access.rb +++ b/lib/gitlab/ldap/access.rb @@ -14,15 +14,16 @@ module Gitlab end def self.allowed?(user) - self.open(user) do |access| - if access.allowed? - user.last_credential_check_at = Time.now - user.save - true - else - false - end - end + true + # self.open(user) do |access| + # if access.allowed? + # user.last_credential_check_at = Time.now + # user.save + # true + # else + # false + # end + # end end def initialize(user, adapter=nil) @@ -32,20 +33,21 @@ module Gitlab end def allowed? - if Gitlab::LDAP::Person.find_by_dn(user.ldap_identity.extern_uid, adapter) - return true unless ldap_config.active_directory + true + # if Gitlab::LDAP::Person.find_by_dn(user.ldap_identity.extern_uid, adapter) + # return true unless ldap_config.active_directory - # Block user in GitLab if he/she was blocked in AD - if Gitlab::LDAP::Person.disabled_via_active_directory?(user.ldap_identity.extern_uid, adapter) - user.block unless user.blocked? - false - else - user.activate if user.blocked? && !ldap_config.block_auto_created_users - true - end - else - false - end + # # Block user in GitLab if he/she was blocked in AD + # if Gitlab::LDAP::Person.disabled_via_active_directory?(user.ldap_identity.extern_uid, adapter) + # user.block unless user.blocked? + # false + # else + # user.activate if user.blocked? && !ldap_config.block_auto_created_users + # true + # end + # else + # false + # end rescue false end Note that to enable clone/push/pull over https we also need to patch lib/gitlab/ldap/authentication.rb with: diff --git a/lib/gitlab/ldap/authentication.rb b/lib/gitlab/ldap/authentication.rb index bad683c..1818cf0 100644 --- a/lib/gitlab/ldap/authentication.rb +++ b/lib/gitlab/ldap/authentication.rb @@ -34,15 +34,18 @@ module Gitlab end def login(login, password) - @ldap_user = adapter.bind_as( + @ldap_user = adapter(login, password).bind_as( filter: user_filter(login), size: 1, password: password ) end - def adapter - OmniAuth::LDAP::Adaptor.new(config.options.symbolize_keys) + def adapter(login, password) + options = config.options.symbolize_keys + options[:login] = login + options[:password] = password + OmniAuth::LDAP::Adaptor.new(options) end def config Configuration In gitlab.yml use something like the following (modify to your needs): # # 2. Auth settings # ========================== ## LDAP settings # You can inspect a sample of the LDAP users with login access by running: # bundle exec rake gitlab:ldap:check RAILS_ENV=production ldap: enabled: true servers: ########################################################################## # # Since GitLab 7.4, LDAP servers get ID's (below the ID is 'main'). GitLab # Enterprise Edition now supports connecting to multiple LDAP servers. # # If you are updating from the old (pre-7.4) syntax, you MUST give your # old server the ID 'main'. # ########################################################################## main: # 'main' is the GitLab 'provider ID' of this LDAP server ## label # # A human-friendly name for your LDAP server. It is OK to change the label later, # for instance if you find out it is too large to fit on the web page. # # Example: 'Paris' or 'Acme, Ltd.' label: 'LDAP_EXAMPLE_COM' host: ldap.example.com port: 636 uid: 'sAMAccountName' method: 'ssl' # \"tls\" or \"ssl\" or \"plain\" bind_dn: '' password: '' # This setting specifies if LDAP server is Active Directory LDAP server. # For non AD servers it skips the AD specific queries. # If your LDAP server is not AD, set this to false. active_directory: true # If allow_username_or_email_login is enabled, GitLab will ignore everything # after the first '@' in the LDAP username submitted by the user on login. # # Example: # - the user enters 'jane.doe@example.com' and 'p@ssw0rd' as LDAP credentials; # - GitLab queries the LDAP server with 'jane.doe' and 'p@ssw0rd'. # # If you are using \"uid: 'userPrincipalName'\" on ActiveDirectory you need to # disable this setting, because the userPrincipalName contains an '@'. allow_username_or_email_login: false # To maintain tight control over the number of active users on your GitLab installation, # enable this setting to keep new users blocked until they have been cleared by the admin # (default: false). block_auto_created_users: false # Base where we can search for users # # Ex. ou=People,dc=gitlab,dc=example # base: 'OU=Users,OU=division,OU=department,DC=example,DC=com' # Filter LDAP users # # Format: RFC 4515 http://tools.ietf.org/search/rfc4515 # Ex. (employeeType=developer) # # Note: GitLab does not support omniauth-ldap's custom filter syntax. # user_filter: '(&(objectclass=user)(objectclass=person))'","tags":"Tutorials","title":"Gitlab LDAP authentication without querying account or anonymous binding"},{"url":"tutorials/building_the_linux_kernel.html","text":"Getting the source First you need to fetch the source. Visit kernel.org and get the version of your preference. Alternative, if you plan to hack it you might prefer to get the latest (merged by Linus Torvalds) code by cloning his git repository: git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git Configuring After you decompress the fetched archive or the git clone is done, you will need to create a .config file for your build. You can either create a totally new .config file with make config or extract one from the running kernel with make localmodconfig . It is also possible to use some other targets (e.g. nconfig for a ncurses based configuration menu), for a full list try make help . In order to keep the build directory completely separated from the source code, you should use make O=/path/to/build/directory . The path might be relative or absolute. So, the easiest way to get going is: make O=/path/to/build/directory localmodconfig If the running kernel is older than the one you are trying to build you will probably be prompted to configure some newly introduced configuration parameters. It should be safe to just use the defaults for such case (i.e. just type enter). Building To build the bare kernel and all modules run: make O=/path/to/build/directory This will take some time, so be patient. If you work on a multi-core machine you will probably want to use the -j argument to enable parallel compilation and reduce compilation time. You can also give a numeric argument to determine how many parallel jobs you permit, e.g., -j4 . Installing To install the freshly built modules run: sudo make O=/path/to/build/directory modules_install To install the freshly built kernel run: sudo make O=/path/to/build/directory install Note, however, that the install target requires the presence of the installkernel script. In debian it can be found in the standard repositries. In archlinux it is not available so I modified the one provided by wdemoss in the archlinux forums , you can find this script here . You should now be able to reboot and chose the freshly built kernel from your bootloader menu (grub or lilo).","tags":"Tutorials","title":"How to build the linux kernel"},{"url":"blog/voluntary_logging.html","text":"In an effort to stop using google calendar I exported all the events I created since the first day I started using it (this was 4 years ago). So the last 4 years I have created 2256 events. That is about 1.54520547945 events per day… Essentially meaning that google is (partly) aware of about one \"important\" thing per day in my life this last 4 years (not including e-mail parsers). To be honest I remember myself using it even earlier but probably at some point I trimmed my history (I would be really impressed if this was automatically performed by google). That's it, hope some of you found it interesting…","tags":"Blog","title":"Voluntary Logging of My Life"},{"url":"tutorials/using_git_to_backup_configuration.html","text":"This tutorial is about backing up the configuration under a user's home directory using Git. Git supports negation of patterns in .gitignore files. To negate a pattern we simply prefix it with ! . This feature enables to use .gitignore file in a user's home directory that instructs Git to ignore all files under this directory except the ones matching the patterns prefixed with ! . i.e. ################################################################################ # Ignore everything except what we want to back up (Note that / is the # root of the repository and not the actual root of the filesystem ################################################################################ /* ################################################################################ # You definitely do not want to ignore your gitignore (: ################################################################################ !/. gitignore ################################################################################ # Files ################################################################################ !/. Xresources !/ Documents / zakkak . vcf !/. zshrc ################################################################################ # Folders ################################################################################ !/. config / /. config /* !/. config / git / !/. config / htop / !/. fonts / !/ bin / Note also that core.excludesfile in the Git configuration must not be set to ~/.gitignore . Please check man git-config to see how you can accomplish this. In general it is advised to use $HOME/.config/git/ignore to set patterns to be globally ignored by Git. Now you can run git init in the user's home directory to initialize a repository and the git add . to stage all files not ignored by Git based on the new .gitignore . Then git remote add origin url/to/your/repo and you can start tracking the user's configuration and push it upstream so you can sync it across different systems.","tags":"Tutorials","title":"How to backup your configuration using Git"},{"url":"tutorials/change_uid_ecryptfs.html","text":"This tutorial is about changing the UID of a user with an encrypted, by ecryptfs, home directory in Ubuntu. You first need to logout the user you want to modify and kill all processes he runs. An easy approach is to restart and log in as root or as another sudo user. To enable the root user (by default it is disabled) execute the following commands: sudo passwd root Now you can log in using root and the password you provided. Once logged in as root execute: usermod -u newUID myuser to change myuser's uid and chown -R myuser /home/.ecryptfs/myuser to change the owner of the encrypted files. You should now be able to log out and log back in as myuser. Finally to disable the root account again execute: sudo passwd -dl root","tags":"Tutorials","title":"How to change the UID of a user with an encrypted home directory in Ubuntu"},{"url":"tutorials/enable_automatic_security_updates_in_Ubuntu.html","text":"This tutorial will enable automatic download and installation of security updates for Ubuntu. First we need to install unattended-upgrades : sudo apt-get install unattended-upgrades The we need to enable it: sudo dpkg-reconfigure -plow unattended-upgrades More information can be found [here](https://help.ubuntu.com/community/AutomaticSecurityUpdates}.","tags":"Tutorials","title":"Enable automatic security updates in Ubuntu"},{"url":"tutorials/ubuntu_1304_raid1_setup.html","text":"Purpose This tutorial aims to help you setup a software RAID-1 (mirror) under ubuntu 13.04 Lets assume the following mapping /dev/sda1 / /dev/sda2 /home /dev/sda3 swap /dev/sda4 /spare We also assume that you have a second (empty) hard disk drive larger or equal to sda . We are going to create 4 new partitions (md1,md2,md3,md4) which will act as RAID-1 using sda1 & sdb1, sda2 & sdb2, sda3 & sdb3, and sda4 & sdb4 respectively to store the data. This way all our data will be available on both disks. Dependencies $ apt-get install initramfs-tools mdadm Now run $ modprobe raid1 and $ more /proc/mdstat This should print something like this: Personalities : [linear] [multipath] [raid0] [raid1] [raid6] [raid5] [raid4] [raid10] unused devices: Setup sdb sdb's partition table must be a replica of sda's. Execute: # sfdisk -d /dev/sda | sfdisk --force /dev/sdb to replicate it. Next we need to set the partitions' types. Execute: # fdisk /dev/sdb you will see a prompt like this: # Command (m for help): type t and enter. Then you will see a prompt like this: # Partition number (1-4): type 1 and enter. Then you will see a prompt like this: Hex code (type L to list codes): type fd and enter. Do this for every partition (1-4) only changing the partition number at the second prompt. Finally type w and enter to write the changes. The output should be like this: Command (m for help): t Partition number (1-4): 1 Hex code (type L to list codes): fd Changed system type of partition 1 to fd (Linux raid autodetect) Command (m for help): t Partition number (1-4): 2 Hex code (type L to list codes): fd Changed system type of partition 2 to fd (Linux raid autodetect) Command (m for help): t Partition number (1-4): 3 Hex code (type L to list codes): fd Changed system type of partition 3 to fd (Linux raid autodetect) Command (m for help): t Partition number (1-4): 4 Hex code (type L to list codes): fd Changed system type of partition 4 to fd (Linux raid autodetect) Command (m for help): w The partition table has been altered! Calling ioctl() to re-read partition table. Create the RAID arrays # for i in 1 2 3 4; do mdadm --create /dev/md$i --level=1 --raid-disks=2 missing /dev/sdb$i; done If you see the following message type y. mdadm : Note : this array has metadata at the start and may not be suitable as a boot device . If you plan to store '/boot' on this device please ensure that your boot - loader understands md / v1 . x metadata , or use -- metadata = 0.90 Continue creating array ? Now setup the filesystem on the arrays. # for i in 1 2 4; do mkfs.ext4 /dev/md$i; done # mkswap /dev/md3 Configure mdadm # cp /etc/mdadm/mdadm.conf /etc/mdadm/mdadm.conf_orig # mdadm --examine --scan >> /etc/mdadm/mdadm.conf Update the fstab Open /etc/fstab and change the /dev/sdX uuids with those of the corresponding /dev/mdX uuids. To see the mapping between /dev/mdX and the uuids use: $ ls -l /dev/disk/by-uuid/ Temporarily set GRUB2 Create /etc/grub.d/09_temp with the following content 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/bin/sh exec tail -n +3 $0 # This file provides an easy way to add custom menu entries. Simply type the # menu entries you want to add after this comment. Be careful not to change # the 'exec tail' line above. menuentry 'temp' --class ubuntu --class gnu-linux --class gnu --class os { insmod raid insmod mdraid insmod part_msdos insmod ext2 set root = '(md/1)' echo 'Loading Linux...' linux /boot/vmlinuz-3.8.0-25-generic root = UUID = the_UUID_of_/dev/md1 ro quiet echo 'Loading initial ramdisk ...' initrd /boot/initrd.img-3.8.0-25-generic } Use $ uname-r to get the appropriate kernel version or just $ ls /boot/ to see the available files. Make /etc/grub.d/09_temp executable # chmod +x /etc/grub.d/09_temp Now we need to update GRUB # update-grub and the ramdisk # update-initramfs -u Finally mount /dev/md1, /dev/md2 and /dev/md3 and # cp -dpRx / /mnt/md1 # rm -rf /mnt/md1/home /mnt/md1/spare # cp -dpRx /home/* /mnt/md2 # cp -dpRx /spare/* /mnt/md4 Install GRUB on both disks # grub-install /dev/sda # grub-install /dev/sdb # reboot If during the startup it asks you something about booting in degraded mode type y. Then you might also need to type S. When the system finally start, execute $ df and you should see /dev/md1, /dev/md2 and /dev/md4 in the listing. Update partitions' type of /dev/sda and add them to the array Execute: # fdisk /dev/sda you will see a prompt like this: # Command (m for help): type t and enter. Then you will see a prompt like this: # Partition number (1-4): type 1 and enter. Then you will see a prompt like this: Hex code (type L to list codes): type fd and enter. Do this for every partition (1-4) only changing the partition number at the second prompt. Finally type w and enter to write the changes. The output should be like this: Command (m for help): t Partition number (1-4): 1 Hex code (type L to list codes): fd Changed system type of partition 1 to fd (Linux raid autodetect) Command (m for help): t Partition number (1-4): 2 Hex code (type L to list codes): fd Changed system type of partition 2 to fd (Linux raid autodetect) Command (m for help): t Partition number (1-4): 3 Hex code (type L to list codes): fd Changed system type of partition 3 to fd (Linux raid autodetect) Command (m for help): t Partition number (1-4): 4 Hex code (type L to list codes): fd Changed system type of partition 4 to fd (Linux raid autodetect) Command (m for help): w The partition table has been altered! Calling ioctl() to re-read partition table. Finally add them. # for i in 1 2 3 4; do mdadm --add /dev/md$i /dev/sda$i; done Executing: $ cat /proc/mdstat should print something like this Personalities : [linear] [multipath] [raid0] [raid1] [raid6] [raid5] [raid4] [raid10] md3 : active raid1 sda3[2] sdb3[1] 8384448 blocks super 1.2 [2/1] [_U] resync=DELAYED md4 : active raid1 sda4[2] sdb4[1] 162277248 blocks super 1.2 [2/1] [_U] resync=DELAYED md2 : active raid1 sda2[2] sdb2[1] 41910144 blocks super 1.2 [2/1] [_U] resync=DELAYED md1 : active raid1 sda1[2] sdb1[1] 31440512 blocks super 1.2 [2/1] [_U] [=>...................] recovery = 9.8% (3111488/31440512) finish=13.5min speed=34736K/sec unused devices: Wait for it to finish $ watch cat /proc/mdstat Now we must reconfigure mdadm # cp /etc/mdadm/mdadm.conf_orig /etc/mdadm/mdadm.conf # mdadm --examine --scan >> /etc/mdadm/mdadm.conf Final setup of GRUB2 Delete the temporary entry # rm -f /etc/grub.d/09_temp Now update GRUB # update-grub and the ramdisk # update-initramfs -u Re-install and reboot # grub-install /dev/sda # grub-install /dev/sdb # reboot Test To test your new RAID-1 setup follow these instructions. Source: http://www.howtoforge.com/how-to-set-up-software-raid1-on-a-running-system-incl-grub2-configuration-debian-squeeze","tags":"Tutorials","title":"Ubuntu 13.04 RAID-1 setup"},{"url":"code/syncbackup_script.html","text":"#!/bin/bash ######################################################################### # # # File: backup_settings.sh A sync/backup script # # # # ++++++++++++++++++++++++++++++ # # Copyright (C) 2013 + Author: Foivos S. Zakkak + # # + Website: foivos.zakkak.net + # # + Email: foivos@zakkak.net + # # ++++++++++++++++++++++++++++++ # # # # This program is free software: you can redistribute it and/or modify # # it under the terms of the GNU General Public License as published by # # the Free Software Foundation, either version 3 of the License, or (at # # your option) any later version. # # # # This program is distributed in the hope that it will be useful, but # # WITHOUT ANY WARRANTY; without even the implied warranty of # # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU # # General Public License for more details. # # # # You should have received a copy of the GNU General Public License # # along with this program. If not, see . # # # ######################################################################### ######################################################################## # # # This is a script to sync configuration files between two directories # # (HOME and BACKUP_DIR) # # # # The files are first diffed and if they are not same the most recent # # overwrites the older one. # # # # Limitations: The script does not adapt to file deletions # # # ######################################################################## IFS=$(echo -en \"\\n\\b\") BACKUP_DIR=$HOME/\"SparkleShare/settings\" mkdir -p $BACKUP_DIR chmod 700 $BACKUP_DIR FILES=\" Documents/zakkak.vcf .bash_aliases .bash_profile .zshrc .indent.pro .tmux.conf .latexmkrc .emacs .emacs.el .dircolors .gitconfig .gitignore .mbsyncrc .fonts.conf\" FOLDERS=\" .config/htop .fonts bin\" CURR_DIR=$(pwd) cd $HOME for d in $FOLDERS do for sd in `find $d -type f 2> /dev/null` do FILES+=\" ${sd}\" # DON'T indent this done done cd $CURR_DIR cd $BACKUP_DIR for d in $FOLDERS do for sd in `find $d -type f 2> /dev/null` do # if [[ ! \"$FILES\" =~ \"$sd\" ]] # This check is too expensive # then FILES+=\" ${sd}\" # DON'T indent this # fi done done # Eliminate duplicates IFS= FILES=`echo -n $FILES | sort | uniq` IFS=$(echo -en \"\\n\\b\") cd $CURR_DIR for f in $FILES do LOCAL=\"$HOME/$f\" BACKUP=\"$BACKUP_DIR/$f\" diff $LOCAL $BACKUP 2> /dev/null > /dev/null RES=$? if [ $RES -ne 2 ] # If diff didn't fail (both files exist) then if [ $RES -eq 1 ] # if there are diffs between the files then # If local is newer than backup copy to backup else fetch # from backup if [ $LOCAL -nt $BACKUP ] then cp $LOCAL $BACKUP echo -e \"\\033[33;1m --> \\033[m\" $f else cp $BACKUP $LOCAL echo -e \"\\033[31;1m <-- \\033[m\" $f fi fi else if [ -f $LOCAL ] then DIR=${BACKUP%/*} if [ ! -d $DIR ] then mkdir -p $DIR fi cp $LOCAL $BACKUP echo -e \"\\033[33;1m --> \\033[m\" $f elif [ -f $BACKUP ] then DIR=${LOCAL%/*} if [ ! -d $DIR ] then mkdir -p $DIR fi cp $BACKUP $LOCAL echo -e \"\\033[31;1m <-- \\033[m\" $f else echo -e \"\\033[37;41;1mFile not found:\\033[m\" $f fi fi done","tags":"Code","title":"A Sync/BackUp script"},{"url":"tutorials/getting_started_emacs.html","text":"So you want to learn how to use Emacs... First of all install Emacs (I suggest versions >=24). Then start using it. It is going to be hard in the beginning, but day by day you will get used to it and learn new things. Your friends Reference cards (will help you learn the most basic commands) The Emacs built in tutorial (Control-h t). http://www.emacswiki.org (Includes everything about Emacs) a good place to start is http://www.emacswiki.org/emacs/EmacsNewbie The manual ( http://www.gnu.org/software/emacs/manual/html_node/emacs/index.html ) Terminology buffer: an open document in Emacs window: A window displays the contents of a single buffer (see this picture ) frame: the operating systems window (see this picture) kill (for buffer) : close file kill( for text ): cut yank: paste for more terms have a look here . Configuration file Emacs' configuration is stored in \\~/.emacs (Windows users read this ). In this file you can permanently store your preferences. To get you started I suggest having a look at emacs24-starter-kit . Packages Two of the most popular and usefull packages are smex and ido-obiquitous. There a lot more external packages out there that can make emacs even more powerful. I am currently using the following packages. rainbow-mode (Preview colors in css files) rainbow-delimiters (Paints each pair of parentheses/brackets with different colors) tuareg (Mode for editing OCaml files) whole-line-or-region (Lets you kill the whole line without selecting it) smartparens (A smarter parenthesis matching package) auto-complete (Suggests possible completions for what you are typing) undo-tree (A better approach for undoing, supports virtualization of the undo history as a tree and more) auctex ​ (Write and edit LaTeX) For that package system and the repositories have a look here . Programming with emacs Programmers should also read this .","tags":"Tutorials","title":"Getting started with Emacs"},{"url":"tutorials/using_emacs_and_notmuch_mail_client.html","text":"This tutorial aims to help you setup notmuch for multiple IMAP accounts and use emacs as a frontend. ( At the time writing this tutorial emacs version was 24.3 and notmuch version was 0.15.2) Soon after writing this tutorial I experimented with mu and mu4e , the configuration is similar and the experience much better (IMO). The stack We are going to use the following stack to fetch, index and finally read our emails. offlineimap --> notmuch --> emacs Fetching from the IMAP servers First we have to setup offlineimap to fetch our emails to a local directory. A configuration (.offlineimaprc) example follows: [general] accounts = Gmail, Other ui = quiet [Account Gmail] localrepository = localG remoterepository = remoteG autorefresh = 5 holdconnectionopen = true keepalive = 60 [Account Other] localrepository = localI remoterepository = remoteI autorefresh = 5 holdconnectionopen = true keepalive = 60 [Repository localG] type = Maildir localfolders = ~/.mail/G [Repository localI] type = Maildir localfolders = ~/.mail/I [Repository remoteG] type = IMAP remotehost = imap.googlemail.com remoteuser = yourusername remotepass = yourpassword ssl = yes folderfilter = lambda foldername: foldername not in ['Trash', 'Spam', 'Junk', 'All Mail', '[Gmail]/All Mail', '[Gmail]/Spam', '[Gmail]/Trash', '[Gmail]/Junk'] cert_fingerprint = a_hex_code(will explain later) [Repository remoteI] type = IMAP remotehost = mailhost.other.com remoteuser = yourusername remotepass = yourpassword ssl = yes folderfilter = lambda foldername: foldername not in ['Trash', 'Spam', 'Junk', 'Junk E-mail'] cert_fingerprint = a_hex_code(will explain later) Next I will shortly explain the configuration. [general] accounts Here we declare the IMAP accounts, in this case I want two accounts ui Here we specify the UI. Since we are going to run it in the background we would like it to be quiet. Quiet will suppress anything but errors. [Account Name] Here we define account Name. localrepository is where we want to locally store the emails for this account (which we define later). remoterepository is where we want to fetch our email from (which we also define later). autorefresh is the interval (in minutes) between synchronizations with the server. holdconnectionopen is a hint to keep the connection with the IMAP server open. This way we can skip the overhead of a new connection at every synchronization. keepalive is the interval (in seconds) between messages to the server to keep the connection open. [Repository Name] Here we setup the local and remote repositories mentioned earlier. type Defines the type of the repository. (Note: notmuch does not support mbox). localfolders Defines the local folder to store the fetched mails. remotehost Defines the IMAP server. remoteuser Defines the username for the IMAP server. remotepass Defines the password for the IMAP server. ssl Defines whether the IMAP server supports SSL connections (yes/no).\\<br\\> folderfilter Defines a python function that is called before each folder fetch. The folder is fetched only if the function returns true. cert_fingerprint This is the IMAP server's fingerprint in hex. This is required only if ssl is enabled. The first time leave this field out and run offlineimap. It will print a message and give you the value you should fill. That's it. Now fetch your email invoking offlineimap -u basic (to enable printing, so you can see what's going on the first time). After this add offlineimap & at your initialization script or in a cronjob to be executed @reboot. Initial index Now that we have fetched all our email it is time to setup notmuch. That's really simple. Run notmuch and answer its questions (run notmuch config to reconfigure it in case you did something wrong the first time). After you are finished with the configuration run notmuch new.\\<\\p> To initially tag some emails refer to this . Send emails through SMTP To achieve this we are using msmpt . Here you can find a configuration (.msmtprc) example. Emacs setup (.emacs) First add the melpa repository if you haven't done it already. (require 'package) (add-to-list 'package-archives '(\"melpa\" . \"http//melpa.milkbox.net/packages\") t) (package-initialize) Now install the package with: M-x package-refresh-contents M-x package-install RET notmuch RET And finally add these to your configuration file: (require 'notmuch) ; loads notmuch package (setq message-kill-buffer-on-exit t) ; kill buffer after sending mail) (setq mail-specify-envelope-from t) ; Settings to work with msmtp (setq message-sendmail-envelope-from header) (setq mail-envelope-from header) (setq notmuch-fcc-dirs \"G/[Gmail]Sent Mail\") ; stores sent mail to the specified directory (setq message-directory \"G/[Gmail]Drafts\") ; stores postponed messages to the specified directory For more customization and tricks have a look here .","tags":"Tutorials","title":"Using emacs and notmuch as a mail client"},{"url":"tutorials/google_pdf_viewer_chromium.html","text":"This is a tutorial (more like a code dumb) on how to enable the pdf viewer plugin from google chrome in chromium. wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb ar vx google-chrome-stable_current_amd64.deb rm google-chrome-stable_current_amd64.deb control.tar.gz debian-binary tar --lzma -xvf data.tar.lzma sudo cp opt/google/chrome/libpdf.so /usr/lib/chromium-browser/ rm -rf etc opt usr data.tar.lzma","tags":"Tutorials","title":"Google PDF viewer on Chromium"},{"url":"tutorials/flashing_bios_acer_aspire_2920z.html","text":"A few weeks ago my precious Acer Aspire 2920z started misbehaving. The symptoms: Power and battery leds flashing as soon as I plug it in. Automatic power on as soon as I plug it in. Screen backlight doesn't go on and i can see it gets through the BIOS splash screen and then nothing. On battery exactly the same results, except that this time it waits for you to push the power button to start. Suggestions: Unplug it and remove the battery. Then keep the power button pressed for about 1 minute to statically discharge the laptop. Didn't work. Your mobo is bricked. Didn't look like this. There is a short circuit in the display cables. Tried without the display and an external monitor. Still the same. Your power supply is bricked get a new one. Didn't look like this. There is something wrong with the power conductors. I was almost convinced that this was the problem but it was not… A friend told me he had a similar problem and he got it fixed flashing the BIOS. Didn't believe it at the begining but that was it. The solution: Flash your BIOS. Download the latest BIOS from http://support.acer-euro.com/drivers/downloads.html and not the new site (it includes an outdated version and no DOS utility…) Download unetbootin . Create a FreeDOS usb with unetbootin Copy and paste everything from the zip you downloaded from Acer to the bootable usb stick you just created Boot your laptop from the usb stick and choose option 5 when the FreeDOS menu appears Type the letter of the usb stick to enter it. In my case it was c: execute dir to see if you are at the right place (you should see the files you pasted) execute phlash16 /x /s /mode=3 CLD-114.WPH to flash the BIOS (you might want to execute the batch file instead but in my case it did not work) That's it. My precious is working fine again.","tags":"Tutorials","title":"Flashing BIOS (Acer Aspire 2920z)"},{"url":"blog/my_favorite_vim_plugins.html","text":"Plugin Description Link Vundle The plugin manager https://github.com/gmarik/vundle Gundo Undo tree visualizer https://github.com/sjl/gundo.vim NERDTree Folder tree visualizer https://github.com/scrooloose/nerdtree NERDCommenter Make commenting easy and fast https://github.com/scrooloose/nerdcommenter Automatic TeX Writing LaTeX the easy way https://github.com/coot/atp_vim Syntastic Syntax checking on save https://github.com/scrooloose/syntastic SuperTab Auto completion with `<Tab>` https://github.com/ervandew/supertab AutoComplPop Automatically show the completion menu http://www.vim.org/scripts/script.php?script_id=1879 CtrlP Fuzzy file, buffer, mru, tag, etc finder https://github.com/kien/ctrlp.vim Vimux Vim -\\> tmux https://github.com/benmills/vimux ZoomWin Zoom to current window with `<C-w> o` http://vim.sourceforge.net/scripts/script.php?script_id=508 Tabular Align text/code to a symbol https://github.com/godlygeek/tabular (i.e. assignments to \"=\") VCScommand VCS integration in VIM http://www.vim.org/script.php?script_id=90 VIM-Autoclose Autocloses ( and { and puts the cursor inside https://github.com/Townk/vim-autoclose MatchIt Make % match more stuff http://www.vim.org/scripts/script.php?script_id=39 (i.e begin end) AutoTag Updates entries in a tags file automatically on save http://www.vim.org/scripts/script.php?script_id=1343 TagBar tags visualizer http://majutsushi/tagbar BuffKill Mainly to unload, delete or wipe a buffer http://www.vim.org/scripts/script.php?script_id=1147 without closing the window (or windows) it was displayed in SearchComplete Adds completion to search http://www.vim.org/scripts/script.php?script_id=474 Numbers Relative numbering on normal mode https://github.com/myusuf3/numbers.vim Absolute numbering on insert mode foivos.vim My theme (based on ron) https://github.com/zakkak/foivos.vim","tags":"Blog","title":"My Favorite VIM plugins"},{"url":"blog/svnkomp_vcsdiff.html","text":"Do you remember svnkomp ? After completely rewriting it from bash to ruby i decided to extend it. svnkomp is called vcsdiff from now on and is available as a ruby gem (currently prerelease) vcsdiff gem source can be found here . Finally to get the pure ruby script go here .","tags":"Blog","title":"svnkomp -> vcsdiff"},{"url":"code/svnkomp_using_kompare_svndiff.html","text":"An extended version of this script can be found here . #!/usr/bin/env ruby ################################################################################ # # # File: svnkomp.rb # # ++++++++++++++++++++++++++++++ # # Copyright (C) 2012 + Author: Foivos S. Zakkak + # # + Website: foivos.zakkak.net + # # + Email: foivos@zakkak.net + # # ++++++++++++++++++++++++++++++ # # # # Based on the script svnvimdiff, written by # # Geoff Buchan # # # # This program is free software: you can redistribute it and/or modify # # it under the terms of the GNU General Public License as published by # # the Free Software Foundation, either version 3 of the License, or # # (at your option) any later version. # # # # This program is distributed in the hope that it will be useful, # # but WITHOUT ANY WARRANTY; without even the implied warranty of # # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # # GNU General Public License for more details. # # # # You should have received a copy of the GNU General Public License # # along with this program. If not, see . # # # ################################################################################ require 'optparse' require 'ftools' options = {} option_parser = OptionParser.new do |opts| opts.banner = %'Usage: #{opts.program_name} [OPTIONS] -- [DIFF OPTIONS]' opts.separator '' opts.separator 'Options' options[:files] = Array.new opts.on('-f','--file FILE',Array,'Define the file/files you want to diff', '(you can use it more than once', 'or seperate the filenames with commas)') do |f| options[:files]+=f end opts.separator '' opts.separator 'Diff options:' opts.separator 'All diff options are passed to svn diff' opts.separator '' opts.separator 'Common options:' opts.on_tail('-h','--help','Show this message') do puts option_parser exit 0; end end begin option_parser.parse!(ARGV) rescue OptionParser::InvalidOption, OptionParser::MissingArgument puts option_parser exit 1; end # if the user didn't specify any arguments go through each file in the directory if options[:files].length==0 modified=%x[svn st 2> /dev/null | grep -e \"&#94;[MU]\" | awk '{print $2}'] modified.split(%r[\\n]).each do |f| options[:files].push(f) if File.file?(f) end end patch=\"/tmp/svnkomp_747_patch\" onsvn=\"\" options[:files].each do |f| onsvn=\"/tmp/\"+f %x[cp #{f} #{onsvn}] %x[svn diff #{ARGV.join(\" \")} #{f} > #{patch}] if !($?.success?) exit 1; end %x[patch -R -p0 #{onsvn} #{patch}] %x[kompare #{onsvn} #{f}] File.delete(onsvn) end at_exit do %x[rm -rf #{onsvn} #{patch}] end","tags":"Code","title":"svnKomp (using Kompare for svndiff)"},{"url":"code/text_srt_converter.html","text":"#!/usr/bin/env ruby ################################################################################ # # # File: greek2utf8.rb # # ++++++++++++++++++++++++++++++ # # Copyright (C) 2012 + Author: Foivos S. Zakkak + # # + Website: foivos.zakkak.net + # # + Email: foivos@zakkak.net + # # ++++++++++++++++++++++++++++++ # # # # This program is free software: you can redistribute it and/or modify # # it under the terms of the GNU General Public License as published by # # the Free Software Foundation, either version 3 of the License, or # # (at your option) any later version. # # # # This program is distributed in the hope that it will be useful, # # but WITHOUT ANY WARRANTY; without even the implied warranty of # # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # # GNU General Public License for more details. # # # # You should have received a copy of the GNU General Public License # # along with this program. If not, see . # # # ################################################################################ require 'optparse' require 'iconv' options = {} option_parser = OptionParser.new do |opts| opts.banner = 'Greek encoding to utf-8 converter' opts.separator '' opts.separator %'Usage: #{opts.program_name} FILE [OPTIONS]' opts.separator '' opts.separator 'Options' opts.on('-o', '--outputfile FILE', 'File to write the output') do |v| options[:output] = v end avail_encs = %w[windows-1253 iso-8859-7] options[:enc] = 'windows-1253' opts.on('-e', '--encoding TYPE', avail_encs, 'Encoding of input file', \"(#{avail_encs.join(',')})\", 'defaults to windows-1253') do |e| options[:enc] = e end opts.separator '' opts.separator 'Common options:' opts.on_tail('-h','--help','Show this message') do puts option_parser exit 0; end end begin option_parser.parse!(ARGV) rescue OptionParser::InvalidOption, OptionParser::MissingArgument puts option_parser exit 1; end if ARGV.length == 0 puts option_parser exit 1; end data = File.read(ARGV[0]) conv = Iconv.new('utf-8', options[:enc]) result = conv.iconv(data) $stderr.puts %'The input file encoding is defined as #{options[:enc]}' if options[:output] puts %'Output file = #{options[:output]}' File.open(options[:output], 'w') do |fp| fp.puts(result) end else puts result end","tags":"Code","title":"Text encoding converter (suitable for subtitles)"},{"url":"code/hello_world.html","text":"#include <stdio.h> int main () { printf ( \"Hello world! \\n \" ); return 0 ; }","tags":"Code","title":"Hello world"},{"url":"tutorials/changing_default_browser_thunderbird.html","text":"If you are unable to launch Firefox from URL links in a Thunderbird mail message, or if you want to change the browser that is launched, add the following lines to the user.js file, located in your Thunderbird profile folder (you may need to create the user.js file). Change the path of the Firefox executable, if yours is not /usr/bin/firefox . user_pref(\"network.protocol-handler.app.http\", \"/usr/bin/firefox\"); user_pref(\"network.protocol-handler.app.https\", \"/usr/bin/firefox\"); user_pref(\"network.protocol-handler.app.ftp\", \"/usr/bin/firefox\"); Note: You can also use about:config to set these preferences. See Register protocol and network.protocol-handler.app.(protocol) for more information. If you are still unable to change the browser after modifying these settings, editing the mimeTypes.rdf file, also located in your Profile folder, can fix the problem. Simply use a text editor to search for all references to the browser that links are currently opening in and replace them with references to the browser that you would like links to open in. If there are no references to browsers to be replaced in the mimeTypes.rdf file, then adding some new sections to this file can fix the problem. Rather than directly editing the file, you can get Thunderbird to automatically add the required sections as follows: Navigate to \"Edit --> Preferences --> Advanced\" in the Thunderbird menus and click on the \"Config Editor\" button. Search for the following three entries: network.protocol-handler.warn-external.http network.protocol-handler.warn-external.https network.protocol-handler.warn-external.ftp Set the value of each of these three entries to true (you can do this by double-clicking on each entry, then close the about:config window and click \"OK\" on the \"Thunderbird Preferences\" window). Having completed these steps, the next time you click on an http, https or ftp link in Thunderbird, you will be presented with the \"Launch Application\" window. Press the \"Choose\" button on this window to select your browser of choice. This will add the required entry to the mimeTypes.rdf file. This is a one-time task; having selected the browser once, links of the same type will now always be opened with the selected browser. source: http://kb.mozillazine.org/Default_browser#Setting_the_browser_that_opens_in_Thunderbird_-_Linux","tags":"Tutorials","title":"Changing the default browser in Thunderbird"},{"url":"tutorials/how_create_local_git_repositories.html","text":"Create the repo directory (the '.' prefix is to make it hidden) mkdir .myrepo.git Go inside the directory cd .myrepo.git Initialize the git repo git init --bare Our repo is now ready to clone: git clone /path/to/.myrepo.git where_to_clone NOTE : the first push must be git push origin master And now you can work from that directory as usual ;)","tags":"Tutorials","title":"How to create local git repositories"},{"url":"tutorials/changing_user_id_linux.html","text":"As a different user execute usermod -u username find / -user ; -exec chown -h ; {} \\; example: usermod -u 2179 user1 find / -user 1000 -exec chown -h 2179 {} \\;","tags":"Tutorials","title":"Changing user id in linux"},{"url":"tutorials/mounting_remote_folders_sshfs.html","text":"This tutorial will show you how to mount a remote folder, that you can access through sftp , on your local filesystem. First you will need to set up your ssh connection to work passwordless . Read this if you don't know how. Install sshfs to your system and add your user to the fuse group. sudo apt-get install sshfs sudo adduser $USER fuse Open /etc/fstab and append the following line (yes it is one line) sshfs#username@remote.server:/remote/path/folder /local/path/to_mount fuse comment=sshfs,noauto,users,exec,reconnect,transform_symlinks,BatchMode=yes 0 0 To mount execute: mount /local/path/to_mount To unmount execute: fusermount -u /local/path/to_mount to unmount.","tags":"Tutorials","title":"Mounting remote folders with sshfs"},{"url":"tutorials/how_use_your_google_openid_sites_supporting_openid_one.html","text":"Simply type https://www.google.com/accounts/o8/id as your OpenID and it will do the trick ;)","tags":"Tutorials","title":"How to use your Google OpenID on sites supporting OpenID (like this one)"},{"url":"code/hanoi_towers.html","text":"/****************************************************************************** * * * File: hanoi_towers.c * * * * This program solves the Towers of Hanoi puzzle recursively * * * * For details about that weird \\033 staff visit * * www.linuxdoc.org/HOWTO/Bash-Prompt-HOWTO/c327.html * * * * Compile: * * gcc -lm hanoi.c -o hanoi * * * * Copyright (C) 2011-2012 Foivos S. Zakkak * * * * This program is free software: you can redistribute it and/or modify * * it under the terms of the GNU General Public License as published by * * the Free Software Foundation, either version 3 of the License, or * * (at your option) any later version. * * * * This program is distributed in the hope that it will be useful, * * but WITHOUT ANY WARRANTY; without even the implied warranty of * * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the * * GNU General Public License for more details. * * * * You should have received a copy of the GNU General Public License * * along with this program. If not, see . * * * ******************************************************************************/ /* needed for usleep (see man usleep) */ #define _BSD_SOURCE #include #include #include #include #include /* Unomment to disable effects */ /* #define CS100 */ #ifndef CS100 #if defined(WIN32) || defined(WIN64) #undef COLORED #undef KEEPLOG #else #define COLORED #define KEEPLOG #endif #define ANIMATED #endif /*CS100 */ /* N will hold the number of disks */ int N, delay; /* declare a structure for each column */ /* each column is actually a LIFO stack */ typedef struct column { int top; /* top holds the stack's top index */ int *stack; /* stack is a dynamically allocated array which is used as the stack */ } column_t; /* This function prints the board * won't work well for N>9 */ void printBoard(column_t board[3]) { int i, j, k, n, num_of_digits, width, disk, mod, div; /* calculate the width of the largest disk and add some extra space */ int maxwidth = (2 * (N - 1)) + 4; /* print the letters of the columns */ for (i = 0; i < 3; ++i) { for (k = 0; k < (maxwidth / 2); ++k) printf(\" \"); printf(\"%c\", 'A' + i); for (k = 0; k < (maxwidth / 2); ++k) printf(\" \"); } printf(\"\\n\"); #ifdef KEEPLOG printf(\"\\033[2K\"); #endif /* KEEPLOG */ printf(\"\\n\"); /* print the first empty line for all three columns */ for (i = 0; i < 3; ++i) { for (k = 0; k < (maxwidth / 2); ++k) printf(\" \"); printf(\"|\"); for (k = 0; k < (maxwidth / 2); ++k) printf(\" \"); } printf(\"\\n\"); /* now print the actual columns */ for (i = N - 1; i >= 0; --i) { /* for each stack level */ for (j = 0; j < 3; ++j) { /* for each column/stack */ disk = board[j].stack[i]; /* calculate the disk's width */ width = (2 * (disk - 1)) + 1; if (disk) { /* if there is a disk at this level of the stack */ for (k = 0; k < (((maxwidth - width) + 1) / 2); ++k) printf(\" \"); /* calculate the numbers width */ n = disk; num_of_digits = 0; while (n > 0) { n /= 10; ++num_of_digits; } #ifdef COLORED /* change color */ printf(\"\\033[1;%dm\", 31 + disk % 6); #endif /* COLORED */ div = width / num_of_digits; for (k = 0; k < div; ++k) printf(\"%d\", disk); mod = width % num_of_digits; /* if there are more digits to print */ if (mod) printf(\"%d\", disk / (int) pow(10, num_of_digits - mod)); #ifdef COLORED /* reset color */ printf(\"\\033[0m\"); #endif /* COLORED */ for (k = 0; k < (((maxwidth - width) + 1) / 2); ++k) printf(\" \"); } else { /* if there is no disk at this level of the stack */ for (k = 0; k < (maxwidth / 2); ++k) printf(\" \"); printf(\"|\"); for (k = 0; k < (maxwidth / 2); ++k) printf(\" \"); } } printf(\"\\n\"); } /* print the bottom line */ for (i = 0; i < (maxwidth + 1) * 3; ++i) printf(\"-\"); printf(\"\\n\"); #ifdef ANIMATED /* set the delay between the printings */ usleep(delay); #endif /* ANIMATED */ } /* moves 'disk' from 'from' to 'to' in 'board' */ void move(column_t * board, int disk, int from, int to) { /* remove the disk from the 'from' column */ board[from].stack[--board[from].top] = 0; assert(board[from].top >= 0); /* move the disk to the 'to' column */ board[to].stack[board[to].top++] = disk; #ifdef ANIMATED /* clear the terminal for animated solving */ #if defined(WIN32) || defined(WIN64) system(\"CLS\"); #else /* there are many ways to do it * 1st call system call clear */ /* system(\"clear\"); */ /* 2nd do yourself what clear would do \\033[H moves the cursor to the top left * of the terminal and \\033[J clears it */ /*printf(\"\\033[H\\033[J\"); */ /* 3rd move your cursor X lines up and continue your printing from there * \\033[A moves cursor up N lines */ #ifdef KEEPLOG printf(\"\\033[%dA\", N + 6); #else printf(\"\\033[%dA\", N + 7); #endif /* KEEPLOG */ #endif /* WIN32 || WIN64 */ #endif /* ANIMATED */ /* print the move and then the board */ printf(\"\\n%c-->%c\\n\", 'A' + from, 'A' + to); #ifdef KEEPLOG printf(\"\\033[2K\"); #endif /* KEEPLOG */ printf(\"\\n\"); printBoard(board); return; } /* moves 'disk' number of disks from 'from' to 'to' in 'board' */ void hanoi(column_t * board, int disk, int from, int to) { int tmp; /* if there are no disks to move return (end recursion) */ if (disk-- == 0) return; /* calculate the column to use as temporary */ tmp = 3 - (to + from); /* step 1: * first move all the disks except the bottom one to the tmp column */ hanoi(board, disk, from, tmp); /* step 2: * now we can move the last disk to 'to' */ move(board, disk, from, to); /* step 3: * now move the previously moved (step 1) disks from the tmp column * to 'to' */ hanoi(board, disk, tmp, to); return; } int main(int argc, char **argv) { int i; column_t board[3]; #ifndef CS100 if (argc != 3) #else if (argc != 2) #endif /* CS100 */ { printf(\"\\ Copyright (C) 2011-2012 Foivos S. Zakkak \\n\\ This program comes with ABSOLUTELY NO WARRANTY.\\n\\ This is free software, and you are welcome to redistribute it\\n\\ under certain conditions.\\n\\n\"); #ifndef CS100 printf(\"\\ Usage:%s \\n\\ Example:%s 5 100\\n\", argv[0], argv[0]); #else printf(\"\\ Usage:%s \\n\\ Example:%s 5\\n\", argv[0], argv[0]); #endif /* CS100 */ return 1; } N = atoi(argv[1]); #ifndef CS100 delay = atoi(argv[2]) * 1000; if ((N * delay) < 0) { printf(\"Please enter positive numbers!\"); return 1; } #endif /* CS100 */ board[0].top = N; board[0].stack = (int *) malloc(N * sizeof(int)); /* initially place all disks at first column */ for (i = 0; i < N; ++i) board[0].stack[i] = N - i; for (i = 1; i < 3; ++i) { board[i].top = 0; board[i].stack = (int *) malloc(N * sizeof(int)); } printf(\"\\n\\n\\n\"); printBoard(board); hanoi(board, N, 0, 2); /* free the allocated memory */ for (i = 0; i < 3; ++i) free(board[i].stack); return 0; }","tags":"Code","title":"Hanoi Towers"},{"url":"code/knights_round_table.html","text":"/****************************************************************************** * * * File: round_knights.c * * * * This program solves the knights of the round table math problem with some * * bitwise logic * * * * For details about the problem * * http://mathforum.org/library/drmath/view/55862.html * * * * Copyright (C) 2011-2012 ++++++++++++++++++++++++++++++ * * + Author: Foivos S. Zakkak + * * + Website: foivos.zakkak.net + * * + Email: foivos@zakkak.net + * * ++++++++++++++++++++++++++++++ * * * * This program is free software: you can redistribute it and/or modify * * it under the terms of the GNU General Public License as published by * * the Free Software Foundation, either version 3 of the License, or * * (at your option) any later version. * * * * This program is distributed in the hope that it will be useful, * * but WITHOUT ANY WARRANTY; without even the implied warranty of * * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the * * GNU General Public License for more details. * * * * You should have received a copy of the GNU General Public License * * along with this program. If not, see . * * * ******************************************************************************/ #include #include #include #include int main(int argc, char **argv) { char *res = NULL; if (argc != 2) { printf(\"Usage: %s \\n\", argv[0]); return 1; } unsigned long long int n = strtoull(argv[1], &res;, 10); int msb = (sizeof(n) * 8) - __builtin_clzll(n); if (*res != '\\0' || n == 0 || strstr(argv[1], \"-\")) { printf(\"ERROR: \\\"%s\\\" is not a correct input\\n\", argv[1]); return 1; } else if (errno) { printf(\"ERROR: %s\\n\", strerror(errno)); return 1; } else { printf(\"%llu is the survivor\\n\", ((n &#94; (1 << (msb - 1))) << 1) + 1); return 0; } }","tags":"Code","title":"Knights of the Round Table"},{"url":"tutorials/ssh_login_without_password.html","text":"Open your favorite terminal emulator and type ssh-keygen -t dsa (simply enter on whatever it asks you) try ssh-copy-id -i ~/.ssh/id_dsa.pub user@remote.machine.com if it fails (you don't have ssh-copy-id) do cat ~/.ssh/id_dsa.pub | ssh user@remote.machine.com 'cat >> ~/.ssh/authorized_keys' give your password and you are ready to go try: ssh user@remote.machine.com it should log you in without asking for a password","tags":"Tutorials","title":"SSH login without password"},{"url":"tutorials/synchronizing_iphone_linux.html","text":"Required packages: libgpod4, gtkpod, ifuse, usbmuxd Steps: After having installed the above packages sudo mkdir /media/iPhone (you can choose whatever location you desire) sudo chown `whoami` /media/iPhone ifuse /media/iPhone (this will mount your iphone on /media/iPhone) mkdir -p /media/iPhone/iTunes_Control/Device sudo lsusb -v | grep iSerial this will output like something this: iSerial 1 0000:00:12.2 iSerial 1 0000:00:13.2 iSerial 3 8372189bcafb324324eafbs8432b4235b32130537 iSerial 1 0000:00:12.0 iSerial 0 iSerial 1 0000:00:12.1 iSerial 0 iSerial 1 0000:00:13.0 iSerial 1 0000:00:13.1 iSerial 1 0000:00:14.5 ipod-read-sysinfo-extended 8372189bcafb324324eafbs8432b4235b32130537 /media/iPhone check if /media/iPhone/iTunes_Control/Device/SysInfoExtended now exists launch gtkpod and follow the on-screen instructions. If it shows any warnings don't worry too much ;) You should now be able to access your iphone playlist and add songs. After doing anything you want don't forget to \"save changes\" on gtkpod and quit normally Then before unplugging your iphone always remember to unmount it using fusermount -u /media/iPhone. From now on you can mount your iphone with ifuse /media/iPhone synchronize it with gtkpod and unmount it with fusermount -u /media/iPhone","tags":"Tutorials","title":"Synchronizing iphone on linux"},{"url":"tutorials/connect_ucnet_over_vpn_ubuntu.html","text":"Go to System->Administration->Synaptic Package Manager Search for pptp and install pptp-linux and network-manager-pptp click the network manager and go to VPN Connections->Configure VPN ... Connection name: whatever you like Gateway: 192.168.1.1 User name: login@csd.uoc.gr Password: yourPass now click advanced... and check Use point-to-point encryption (MPPE) ok->ok->close you should now be able to connect using the ucnet network and then clicking network manager's icon and go to VPN Connections->the name you chose for command line installation: sudo apt-get install pptp-linux network-manager-pptp","tags":"Tutorials","title":"Connect to UCNET over vpn on ubuntu"},{"url":"tutorials/using_kompare_svn_diff.html","text":"( Update: 15-10-2012 ) First read this You don't like/understand the svn diff output? You would prefer a better tool with merge options and appropriate coloring? Kompare is a great tool used by kdevelop to compare files. You can find it in the repositories of all famous linux distros or here But how could you use it as svn diff command? I 've written a ruby script based on the script svnvimdiff, written by Geoff Buchan that will let you svn diff your files with kompare. Click here to see and get the script. A usage example is the following (diffs/compares \"file\" with the last checked in \"file\") svnkomp.rb -f file -- -rHEAD","tags":"Tutorials","title":"Using kompare for svn diff"},{"url":"tutorials/connecting_through_gate1csduocgr_and_gate2csduocgr.html","text":"Απλό SSH: ssh gate1.csd.uoc.g​r Αφού εισάγετε των κωδικό σας και εμφανιστεί το % ssh milo θα σας τυπώσει το παρακάτω μήνυμα The authe​nticity of host 'milo.csd.uoc.gr (147.52.19.9)' can't be established. RSA key fingerprint is 5a:37:48:87:3a:d3:37:4e:34:15:4b:d2:3f:07:bc:aa. Are you sure you want to continue connecting (yes/no)? Γράφεται yes Εισάγεται τον κωδικό σας και είστε έτοιμοι Απλό SSH με χρήση enable: ssh gate1.csd.uoc.gr Αφού εισάγετε των κωδικό σας και εμφανιστεί το % enable milo θα σας τυπώσει το παρακάτω μήνυμα Th​e authenticity of host 'milo.csd.uoc.gr (147.52.19.9)' can't be established. RSA key fingerprint is 5a:37:48:87:3a:d3:37:4e:34:15:4b:d2:3f:07:bc:aa. Are you sure you want to continue connecting (yes/no)? Γράφεται yes Εισάγεται τον κωδικό σας και θα εμφανιστεί ενα μήνυμα σαν αυτό You can now connect to milo. 1. Linux commands: ssh zakkak@gate1.csd.uoc.gr -p 10705 scp -P 10705 <filename> zakkak@gate1.csd.uoc.gr: < /full/dest/path> sftp -o port=10705 zakkak@gate1.csd.uoc.gr 2. Windows settings (SSH Secure Shell Client or replace scp/sftp with pscp/psftp): Username: zakkak Hostname: gate1.csd.uoc.gr Port: 10705 For detailed info, go to http://www.csd.uoc.gr/services/useful-info/remote-connection.html Από το παραπάνω μήνυμα κάνουμε αντιγραφή και επικόληση σε άλλο τερματικό (προσοχή το port θα διαφέρει κάθε φορά) ssh zakkak@gate1.csd.uoc.gr -p 17440 θα σας τυπώσει το παρακάτω μήνυμα The authenticity of host 'gate1.csd.uoc.gr (147.52.19.9)' can't be established. RSA key fingerprint is 5a:37:48:87:3a:d3:37:4e:34:15:4b:d2:3f:07:bc:aa. Are you sure you want to continue connecting (yes/no)? Γράφεται yes Εισάγεται τον κωδικό σας και είστε έτοιμοι SSH με Χ11:​ ssh -Χ gate1.csd.uoc.gr Αφού εισάγετε των κωδικό σας και εμφανιστεί το % enable milo θα σας τυπώσει το παρακάτω μήνυμα The authenticity of host 'milo.csd.uoc.gr (147.52.19.9)' can't be established. RSA key fingerprint is 5a:37:48:87:3a:d3:37:4e:34:15:4b:d2:3f:07:bc:aa. Are you sure you want to continue connecting (yes/no)? Γράφεται yes Εισάγεται τον κωδικό σας και θα εμφανιστεί ενα μήνυμα σαν αυτό You can now connect to milo. 1. Linux commands: ssh zakkak@gate1.csd.uoc.gr -p 10705 scp -P 10705 <filename> zakkak@gate1.csd.uoc.gr: < /full/dest/path> sftp -o port=10705 zakkak@gate1.csd.uoc.gr 2. Windows settings (SSH Secure Shell Client or replace scp/sftp with pscp/psftp): Username: zakkak Hostname: gate1.csd.uoc.gr Port: 10705 For detailed info, go to http://www.csd.uoc.gr/services/useful-info/remote-connection.html Από το παραπάνω μήνυμα κάνουμε αντιγραφή και επικόληση σε άλλο τερματικό (προσοχή το port θα διαφέρει κάθε φορά) και προσθέτουμε την παράμετρο -X, το αποτέλεσμα θα είναι κάπως έτσι ssh -X zakkak@gate1.csd.uoc.gr -p 17440 θα σας τυπώσει το παρακάτω μήνυμα The authenticity of host 'gate1.csd.uoc.gr (147.52.19.9)' can't be established. RSA key fingerprint is 5a:37:48:87:3a:d3:37:4e:34:15:4b:d2:3f:07:bc:aa. Are you sure you want to continue connecting (yes/no)? Γράφεται yes Εισάγεται τον κωδικό σας και είστε έτοιμοι (για δοκιμή τρέξτε το xclock) xclock SFTP:​ ssh gate1.csd.uoc.gr Αφού εισάγετε των κωδικό σας και εμφανιστεί το % enable​ milo θα σας τυπώσει το παρακάτω μήνυμα The authenticity of host 'milo.csd.uoc.gr (147.52.19.9)' can't be established. RSA key fingerprint is 5a:37:48:87:3a:d3:37:4e:34:15:4b:d2:3f:07:bc:aa. Are you sure you want to continue connecting (yes/no)? Γράφεται yes Εισάγεται τον κωδικό σας και θα εμφανιστεί ενα μήνυμα σαν αυτό You can now connect to milo. 1. Linux commands: ssh zakkak@gate1.csd.uoc.gr -p 10705 scp -P 10705 <filename> zakkak@gate1.csd.uoc.gr: < /full/dest/path> sftp -o port=10705 zakkak@gate1.csd.uoc.gr 2. Windows settings (SSH Secure Shell Client or replace scp/sftp with pscp/psftp): Username: zakkak Hostname: gate1.csd.uoc.gr Port: 10705 For detailed info, go to http://www.csd.uoc.gr/services/useful-info/remote-connection.html Από το παραπάνω μήνυμα βλέπουμε ότι τα στοιχεία που χρειαζόμαστε για το sftp είναι τα ακόλουθα Hostname: gate1.csd.uoc.gr Port: 17440 Ανοίγουμε την sftp client εφαρμογή της αρεσκείας μας (π.χ. Filezilla) και στις ρυθμίσεις για το site Που επιθιμούμε να συνδεθούμε εισάγουμε τα παραπάνω στοιχεία και επιλέγουμε ως πρωτόκολλο για την σύνδεση το sftp * Στα παραδείγματα χρησιμοποιήθηκε το milo σαν μηχάνημα και to gate1 προφανώς μπορείτε να χρησιμοποιήσετε όποιο μηχάνημα της σχολής θέλετε και το gate2 εναλλακτικά","tags":"Tutorials","title":"Connecting through gate1.csd.uoc.gr and gate2.csd.uoc.gr"}]}